#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sqlite3
import mysql.connector
import json
from datetime import datetime
from decimal import Decimal
import os

def connect_sqlite():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('instance/arbitrage_reports.db')
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite: {e}")
        return None

def connect_mysql(host, database, user, password):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = mysql.connector.connect(
            host=host,
            database=database,
            user=user,
            password=password,
            charset='utf8mb4'
        )
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL: {e}")
        return None

def migrate_employees(sqlite_conn, mysql_conn):
    """–ú–∏–≥—Ä–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    print("üë• –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")
    
    sqlite_cursor = sqlite_conn.cursor()
    mysql_cursor = mysql_conn.cursor()
    
    try:
        sqlite_cursor.execute("SELECT id, name, telegram, is_active, created_at, salary_percent FROM employee")
        employees = sqlite_cursor.fetchall()
        
        for employee in employees:
            mysql_cursor.execute("""
                INSERT INTO employee (id, name, telegram, is_active, created_at, salary_percent)
                VALUES (%s, %s, %s, %s, %s, %s)
            """, employee)
        
        mysql_conn.commit()
        print(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {e}")
        mysql_conn.rollback()

def migrate_accounts(sqlite_conn, mysql_conn):
    """–ú–∏–≥—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    print("üè¶ –ú–∏–≥—Ä–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã...")
    
    sqlite_cursor = sqlite_conn.cursor()
    mysql_cursor = mysql_conn.cursor()
    
    try:
        sqlite_cursor.execute("SELECT id, employee_id, platform, account_name, is_active FROM account")
        accounts = sqlite_cursor.fetchall()
        
        for account in accounts:
            mysql_cursor.execute("""
                INSERT INTO account (id, employee_id, platform, account_name, is_active)
                VALUES (%s, %s, %s, %s, %s)
            """, account)
        
        mysql_conn.commit()
        print(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        mysql_conn.rollback()

def migrate_shift_reports(sqlite_conn, mysql_conn):
    """–ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –æ —Å–º–µ–Ω–∞—Ö"""
    print("üìä –ú–∏–≥—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –æ —Å–º–µ–Ω–∞—Ö...")
    
    sqlite_cursor = sqlite_conn.cursor()
    mysql_cursor = mysql_conn.cursor()
    
    try:
        sqlite_cursor.execute("""
            SELECT id, employee_id, shift_date, shift_type, total_requests, balances_json,
                   scam_amount, scam_comment, scam_personal, dokidka_amount, internal_transfer_amount,
                   dokidka_comment, internal_transfer_comment, bybit_file, htx_file, bliss_file,
                   start_photo, end_photo, created_at, updated_at, bybit_requests, htx_requests,
                   bliss_requests, bybit_first_trade, bybit_last_trade, htx_first_trade, htx_last_trade,
                   bliss_first_trade, bliss_last_trade, gate_first_trade, gate_last_trade,
                   appeal_amount, appeal_comment, appeal_deducted, shift_start_time, shift_end_time
            FROM shift_report
        """)
        reports = sqlite_cursor.fetchall()
        
        for report in reports:
            mysql_cursor.execute("""
                INSERT INTO shift_report (
                    id, employee_id, shift_date, shift_type, total_requests, balances_json,
                    scam_amount, scam_comment, scam_personal, dokidka_amount, internal_transfer_amount,
                    dokidka_comment, internal_transfer_comment, bybit_file, htx_file, bliss_file,
                    start_photo, end_photo, created_at, updated_at, bybit_requests, htx_requests,
                    bliss_requests, bybit_first_trade, bybit_last_trade, htx_first_trade, htx_last_trade,
                    bliss_first_trade, bliss_last_trade, gate_first_trade, gate_last_trade,
                    appeal_amount, appeal_comment, appeal_deducted, shift_start_time, shift_end_time
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, report)
        
        mysql_conn.commit()
        print(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(reports)} –æ—Ç—á–µ—Ç–æ–≤ –æ —Å–º–µ–Ω–∞—Ö")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤: {e}")
        mysql_conn.rollback()

def migrate_orders(sqlite_conn, mysql_conn):
    """–ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–æ–≤"""
    print("üìà –ú–∏–≥—Ä–∏—Ä—É–µ–º –æ—Ä–¥–µ—Ä–∞...")
    
    sqlite_cursor = sqlite_conn.cursor()
    mysql_cursor = mysql_conn.cursor()
    
    try:
        sqlite_cursor.execute("""
            SELECT id, order_id, employee_id, platform, account_name, symbol, side,
                   quantity, price, total_usdt, fees_usdt, status, executed_at,
                   created_at, updated_at
            FROM `order`
        """)
        orders = sqlite_cursor.fetchall()
        
        for order in orders:
            mysql_cursor.execute("""
                INSERT INTO `order` (
                    id, order_id, employee_id, platform, account_name, symbol, side,
                    quantity, price, total_usdt, fees_usdt, status, executed_at,
                    created_at, updated_at
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, order)
        
        mysql_conn.commit()
        print(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(orders)} –æ—Ä–¥–µ—Ä–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤: {e}")
        mysql_conn.rollback()

def migrate_initial_balances(sqlite_conn, mysql_conn):
    """–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤"""
    print("üí∞ –ú–∏–≥—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã...")
    
    sqlite_cursor = sqlite_conn.cursor()
    mysql_cursor = mysql_conn.cursor()
    
    try:
        sqlite_cursor.execute("SELECT id, platform, account_name, balance FROM initial_balance")
        balances = sqlite_cursor.fetchall()
        
        for balance in balances:
            mysql_cursor.execute("""
                INSERT INTO initial_balance (id, platform, account_name, balance)
                VALUES (%s, %s, %s, %s)
            """, balance)
        
        mysql_conn.commit()
        print(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(balances)} –Ω–∞—á–∞–ª—å–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
        mysql_conn.rollback()

def migrate_account_balance_history(sqlite_conn, mysql_conn):
    """–ú–∏–≥—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    print("üìà –ú–∏–≥—Ä–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –±–∞–ª–∞–Ω—Å–æ–≤...")
    
    sqlite_cursor = sqlite_conn.cursor()
    mysql_cursor = mysql_conn.cursor()
    
    try:
        sqlite_cursor.execute("""
            SELECT id, account_id, account_name, platform, shift_date, shift_type,
                   balance, employee_id, employee_name, balance_type
            FROM account_balance_history
        """)
        history = sqlite_cursor.fetchall()
        
        for record in history:
            mysql_cursor.execute("""
                INSERT INTO account_balance_history (
                    id, account_id, account_name, platform, shift_date, shift_type,
                    balance, employee_id, employee_name, balance_type
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, record)
        
        mysql_conn.commit()
        print(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(history)} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
        mysql_conn.rollback()

def migrate_employee_scam_history(sqlite_conn, mysql_conn):
    """–ú–∏–≥—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–∫–∞–º–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    print("‚ö†Ô∏è –ú–∏–≥—Ä–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–∫–∞–º–æ–≤...")
    
    sqlite_cursor = sqlite_conn.cursor()
    mysql_cursor = mysql_conn.cursor()
    
    try:
        sqlite_cursor.execute("""
            SELECT id, employee_id, shift_report_id, amount, comment, date, created_at
            FROM employee_scam_history
        """)
        scams = sqlite_cursor.fetchall()
        
        for scam in scams:
            mysql_cursor.execute("""
                INSERT INTO employee_scam_history (
                    id, employee_id, shift_report_id, amount, comment, date, created_at
                ) VALUES (%s, %s, %s, %s, %s, %s, %s)
            """, scam)
        
        mysql_conn.commit()
        print(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(scams)} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å–∫–∞–º–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∫–∞–º–æ–≤: {e}")
        mysql_conn.rollback()

def migrate_salary_settings(sqlite_conn, mysql_conn):
    """–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞—Ä–ø–ª–∞—Ç—ã"""
    print("üíµ –ú–∏–≥—Ä–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã...")
    
    sqlite_cursor = sqlite_conn.cursor()
    mysql_cursor = mysql_conn.cursor()
    
    try:
        sqlite_cursor.execute("""
            SELECT id, base_percent, min_requests_per_day, bonus_percent, 
                   bonus_requests_threshold, updated_at
            FROM salary_settings
        """)
        settings = sqlite_cursor.fetchall()
        
        for setting in settings:
            mysql_cursor.execute("""
                INSERT INTO salary_settings (
                    id, base_percent, min_requests_per_day, bonus_percent, 
                    bonus_requests_threshold, updated_at
                ) VALUES (%s, %s, %s, %s, %s, %s)
            """, setting)
        
        mysql_conn.commit()
        print(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(settings)} –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞—Ä–ø–ª–∞—Ç—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞—Ä–ø–ª–∞—Ç—ã: {e}")
        mysql_conn.rollback()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ MySQL...\n")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
    sqlite_conn = connect_sqlite()
    if not sqlite_conn:
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ MySQL
    print("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL:")
    host = input("–•–æ—Å—Ç (localhost): ").strip() or "localhost"
    database = input("–ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ").strip()
    user = input("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ").strip()
    password = input("–ü–∞—Ä–æ–ª—å: ").strip()
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL
    mysql_conn = connect_mysql(host, database, user, password)
    if not mysql_conn:
        sqlite_conn.close()
        return
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        migrate_employees(sqlite_conn, mysql_conn)
        migrate_accounts(sqlite_conn, mysql_conn)
        migrate_shift_reports(sqlite_conn, mysql_conn)
        migrate_orders(sqlite_conn, mysql_conn)
        migrate_initial_balances(sqlite_conn, mysql_conn)
        migrate_account_balance_history(sqlite_conn, mysql_conn)
        migrate_employee_scam_history(sqlite_conn, mysql_conn)
        migrate_salary_settings(sqlite_conn, mysql_conn)
        
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üåê –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MySQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Timeweb")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
    
    finally:
        sqlite_conn.close()
        mysql_conn.close()

if __name__ == "__main__":
    main() 