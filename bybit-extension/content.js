// Content script –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ Bybit
class BybitOrderTracker {
  constructor() {
    this.settings = {
      serverUrl: 'http://localhost:5000',
      employeeId: null,
      accountName: '',
      trackingEnabled: false
    };
    this.observer = null;
    this.processedOrders = new Set();
    this.init();
  }

  async init() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await this.loadSettings();
    
    // –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç popup
    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
      if (message.action === 'updateSettings') {
        this.settings = message.settings;
        this.updateTracking();
      } else if (message.action === 'loadExistingOrders') {
        this.loadExistingOrders(message.settings).then(sendResponse);
        return true; // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
      }
    });

    // –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    this.startTracking();
  }

  async loadSettings() {
    try {
      const result = await chrome.storage.sync.get([
        'serverUrl',
        'employeeId',
        'accountName',
        'trackingEnabled'
      ]);
      
      this.settings = {
        serverUrl: result.serverUrl || 'http://localhost:5000',
        employeeId: result.employeeId || null,
        accountName: result.accountName || '',
        trackingEnabled: result.trackingEnabled || false
      };
      
      console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', this.settings);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
      await this.checkServerConnection();
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      this.settings = {
        serverUrl: 'http://localhost:5000',
        employeeId: null,
        accountName: '',
        trackingEnabled: false
      };
    }
  }

  async checkServerConnection() {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º:', this.settings.serverUrl);
      
      const response = await fetch(`${this.settings.serverUrl}/api/employees`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });
      
      if (response.ok) {
        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        this.showSuccessNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      } else {
        console.warn('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π:', response.status);
        this.showErrorNotification(`–°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π: ${response.status}`);
      }
    } catch (error) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É:', error);
      this.showErrorNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
    }
  }

  startTracking() {
    if (!this.settings.trackingEnabled || !this.settings.employeeId) {
      console.log('–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫');
      return;
    }

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => this.setupObserver());
    } else {
      this.setupObserver();
    }
  }

  setupObserver() {
    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ DOM
    this.observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'childList') {
          this.checkForNewOrders();
        }
      });
    });

    // –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
    this.observer.observe(document.body, {
      childList: true,
      subtree: true
    });

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    this.checkForNewOrders();
  }

  checkForNewOrders() {
    // –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –æ—Ä–¥–µ—Ä–∞–º–∏
    const orderTables = document.querySelectorAll('[data-testid="order-table"], .order-table, table');
    
    orderTables.forEach(table => {
      const rows = table.querySelectorAll('tr');
      rows.forEach(row => {
        this.processOrderRow(row);
      });
    });

    // –ò—â–µ–º div-—ç–ª–µ–º–µ–Ω—Ç—ã —Å –æ—Ä–¥–µ—Ä–∞–º–∏ (–¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π)
    this.checkForDivOrders();

    // –ò—â–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤
    this.checkOrderNotifications();
  }

    checkForDivOrders() {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
    const prioritySelectors = [
      'tbody tr',                 // –°—Ç—Ä–æ–∫–∏ –≤ tbody (—Å–∞–º—ã–π –≤–µ—Ä–æ—è—Ç–Ω—ã–π)
      '.ant-table-tbody > tr',    // –ü—Ä—è–º—ã–µ –¥–æ—á–µ—Ä–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ tbody
      'tr:not(:first-child)',     // –°—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
    ];

    let foundOrders = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    for (const selector of prioritySelectors) {
      const elements = document.querySelectorAll(selector);
      console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä ${selector}: –Ω–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      
      elements.forEach(element => {
        const elementText = element.textContent;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
        if (this.isLikelyOrderElement(elementText)) {
          console.log(`–ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä –≤ ${selector}:`, elementText.substring(0, 100));
          this.processOrderElement(element);
          foundOrders = true;
        }
      });
      
      // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ—Ä–¥–µ—Ä–∞ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–∞—Ö, –Ω–µ –∏—â–µ–º –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
      if (foundOrders) {
        console.log(`–ù–∞–π–¥–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–º —Å–µ–ª–µ–∫—Ç–æ—Ä–µ ${selector}, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫`);
        return;
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö, –∏—â–µ–º –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    const otherSelectors = [
      '.ant-table-row',           // Ant Design —Ç–∞–±–ª–∏—Ü—ã
      '[data-row-key]',           // –°—Ç—Ä–æ–∫–∏ —Å data-row-key
      '.order-row',               // –°—Ç—Ä–æ–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤
      '.trade-row',               // –°—Ç—Ä–æ–∫–∏ —Å–¥–µ–ª–æ–∫
      '.history-row',             // –°—Ç—Ä–æ–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
      '[class*="order"]:not([class*="button"]):not([class*="header"])',  // –≠–ª–µ–º–µ–Ω—Ç—ã —Å "order" (–∫—Ä–æ–º–µ –∫–Ω–æ–ø–æ–∫ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
      '[class*="trade"]:not([class*="button"]):not([class*="header"])',  // –≠–ª–µ–º–µ–Ω—Ç—ã —Å "trade" (–∫—Ä–æ–º–µ –∫–Ω–æ–ø–æ–∫ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
      '.table-row',               // –û–±—â–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
      '[data-testid*="order"]',   // –≠–ª–µ–º–µ–Ω—Ç—ã —Å "order" –≤ data-testid
      '[data-testid*="trade"]',   // –≠–ª–µ–º–µ–Ω—Ç—ã —Å "trade" –≤ data-testid
      '.rc-table-row',            // React Component —Ç–∞–±–ª–∏—Ü—ã
      '[class*="list-item"]',     // –≠–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
      '[class*="card"]',          // –ö–∞—Ä—Ç–æ—á–∫–∏
      '.bybit-table-row',         // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–ª–∞—Å—Å—ã Bybit
      '[class*="history"]',       // –≠–ª–µ–º–µ–Ω—Ç—ã –∏—Å—Ç–æ—Ä–∏–∏
      '[class*="transaction"]',   // –≠–ª–µ–º–µ–Ω—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      '.table-body-row',          // –°—Ç—Ä–æ–∫–∏ —Ç–µ–ª–∞ —Ç–∞–±–ª–∏—Ü—ã
      '[role="row"]',             // –≠–ª–µ–º–µ–Ω—Ç—ã —Å —Ä–æ–ª—å—é "row"
      'div[class*="row"]',        // Div —Å "row" –≤ –∫–ª–∞—Å—Å–µ
      'div[class*="item"]',       // Div —Å "item" –≤ –∫–ª–∞—Å—Å–µ
      '[class*="entry"]',         // –≠–ª–µ–º–µ–Ω—Ç—ã –∑–∞–ø–∏—Å–∏
      '[class*="record"]'         // –≠–ª–µ–º–µ–Ω—Ç—ã –∑–∞–ø–∏—Å–∏
    ];

    otherSelectors.forEach(selector => {
      const elements = document.querySelectorAll(selector);
      elements.forEach(element => {
        const elementText = element.textContent;
        if (this.isLikelyOrderElement(elementText)) {
          this.processOrderElement(element);
        }
      });
    });
  }

  isLikelyOrderElement(text) {
    const lowerText = text.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
    if (text.length < 30 || text.length > 500) {
      return false;
    }
    
    // –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª—é—Ç–∞
    const hasCurrency = lowerText.includes('usdt') || lowerText.includes('rub') || 
                       lowerText.includes('btc') || lowerText.includes('eth');
    
    // –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞ —Å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏ (—Ü–µ–Ω—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
    const hasDecimalNumbers = /\d+[.,]\d+/.test(text);
    
    // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
    const hasDirection = lowerText.includes('–ø—Ä–æ–¥–∞–∂–∞') || lowerText.includes('–ø–æ–∫—É–ø–∫–∞') ||
                        lowerText.includes('buy') || lowerText.includes('sell');
    
    // –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const isNotInterface = !lowerText.includes('–≤—Å–µ –≤—Å–µ') && 
                           !lowerText.includes('—ç–∫—Å–ø–æ—Ä—Ç —ç–∫—Å–ø–æ—Ä—Ç') &&
                           !lowerText.includes('–º–æ–Ω–µ—Ç–∞ –º–æ–Ω–µ—Ç–∞') &&
                           !lowerText.includes('—Ç–∏–ø —Ç–∏–ø') &&
                           !lowerText.includes('—Å—Ç–∞—Ç—É—Å —Å—Ç–∞—Ç—É—Å') &&
                           !lowerText.includes('–∫—É–ø–∏—Ç—å / –ø—Ä–æ–¥–∞—Ç—å –∫—É–ø–∏—Ç—å / –ø—Ä–æ–¥–∞—Ç—å');
    
    return hasCurrency && hasDecimalNumbers && hasDirection && isNotInterface;
  }

  processOrderRow(row) {
    try {
      // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ä–¥–µ—Ä–µ
      const cells = row.querySelectorAll('td');
      if (cells.length < 5) return;

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
      const orderData = this.extractOrderData(cells);
      if (!orderData || this.processedOrders.has(orderData.order_id)) {
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
      if (this.isOrderCompleted(orderData.status)) {
        this.sendOrderToServer(orderData);
        this.processedOrders.add(orderData.order_id);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ –æ—Ä–¥–µ—Ä–∞:', error);
    }
  }

  processOrderElement(element) {
    try {
      // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
      const elementText = element.textContent.toLowerCase();
      const textLength = elementText.length;
      
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
      if (textLength < 20 || textLength > 1000) {
        return;
      }
      
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
      if (elementText.includes('–≤—Å–µ –≤—Å–µ') || elementText.includes('—ç–∫—Å–ø–æ—Ä—Ç —ç–∫—Å–ø–æ—Ä—Ç') ||
          elementText.includes('–º–æ–Ω–µ—Ç–∞ –º–æ–Ω–µ—Ç–∞') || elementText.includes('—Ç–∏–ø —Ç–∏–ø') ||
          elementText.includes('—Å—Ç–∞—Ç—É—Å —Å—Ç–∞—Ç—É—Å') || elementText.includes('–∫—É–ø–∏—Ç—å / –ø—Ä–æ–¥–∞—Ç—å –∫—É–ø–∏—Ç—å / –ø—Ä–æ–¥–∞—Ç—å')) {
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∞–ª—é—Ç—ã –∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –æ—Ä–¥–µ—Ä–∞
      const hasCurrency = elementText.includes('usdt') || elementText.includes('btc') ||
          elementText.includes('eth') || elementText.includes('rub');
      const hasNumbers = /\d+[.,]\d+/.test(elementText);
      
      if (!hasCurrency || !hasNumbers) {
        return;
      }

      // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
      const orderData = this.extractOrderDataFromElement(element);
      if (!orderData) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞');
        return;
      }
      
      if (this.processedOrders.has(orderData.order_id)) {
        console.log('‚ö†Ô∏è –û—Ä–¥–µ—Ä —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', orderData.order_id);
        return;
      }

      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞:', orderData.status);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
      if (this.isOrderCompleted(orderData.status)) {
        console.log('‚úÖ –û—Ä–¥–µ—Ä –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', orderData);
        this.sendOrderToServer(orderData);
        this.processedOrders.add(orderData.order_id);
      } else {
        console.log('‚ùå –û—Ä–¥–µ—Ä –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞:', orderData.status);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—Ä–¥–µ—Ä–∞:', error);
    }
  }

  extractOrderData(cells) {
    try {
      // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      let orderId = '';
      let symbol = '';
      let side = '';
      let quantity = '';
      let price = '';
      let status = '';
      let executedAt = '';
      let fees = '0';

      // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —è—á–µ–π–∫–∞—Ö
      cells.forEach((cell, index) => {
        const text = cell.textContent.trim();
        
        // Order ID (–æ–±—ã—á–Ω–æ –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–ª–∏–Ω–Ω—ã–π ID)
        if (index === 0 && text.match(/^[A-Z0-9]{8,}$/)) {
          orderId = text;
        } else if (text.match(/^[A-Z0-9]{8,}$/)) {
          orderId = text;
        }
        
        // Symbol (–æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä—É –≤–∞–ª—é—Ç)
        if (text.match(/^[A-Z]{3,}\/[A-Z]{3,}$/)) {
          symbol = text;
        }
        
        // Side (Buy/Sell) - –∏—â–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö
        if (text.toLowerCase().includes('buy') || text.toLowerCase().includes('–ø–æ–∫—É–ø–∫–∞')) {
          side = 'buy';
        } else if (text.toLowerCase().includes('sell') || text.toLowerCase().includes('–ø—Ä–æ–¥–∞–∂–∞')) {
          side = 'sell';
        }
        
        // Status - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
        if (text.toLowerCase().includes('filled') || text.toLowerCase().includes('completed') || 
            text.toLowerCase().includes('–≤—ã–ø–æ–ª–Ω–µ–Ω') || text.toLowerCase().includes('done')) {
          status = 'filled';
        } else if (text.toLowerCase().includes('canceled') || text.toLowerCase().includes('cancelled') ||
                   text.toLowerCase().includes('–æ—Ç–º–µ–Ω–µ–Ω') || text.toLowerCase().includes('–æ—Ç–º–µ–Ω—ë–Ω')) {
          status = 'canceled';
        } else if (text.toLowerCase().includes('pending') || text.toLowerCase().includes('–æ–∂–∏–¥–∞–Ω–∏–µ')) {
          status = 'pending';
        } else if (text.toLowerCase().includes('appealed') || text.toLowerCase().includes('–∞–ø–µ–ª–ª—è—Ü–∏—è')) {
          status = 'appealed';
        }
        
        // Quantity –∏ Price (—á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏)
        if (text.match(/^\d+\.?\d*$/) || text.match(/^\d+,\d+$/)) {
          const numValue = parseFloat(text.replace(',', '.'));
          if (!quantity && numValue > 0 && numValue < 1000000) {
            quantity = numValue;
          } else if (!price && numValue > 0) {
            price = numValue;
          }
        }
        
        // Fees (–∫–æ–º–∏—Å—Å–∏–∏)
        if (text.toLowerCase().includes('fee') || text.toLowerCase().includes('–∫–æ–º–∏—Å—Å–∏—è')) {
          const feeMatch = text.match(/\d+\.?\d*/);
          if (feeMatch) {
            fees = feeMatch[0];
          }
        }
        
        // –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–∏—â–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö)
        if (text.match(/\d{2}\/\d{2}\/\d{4}/) || text.match(/\d{4}-\d{2}-\d{2}/)) {
          executedAt = text;
        }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
      if (!orderId || !symbol || !side) {
        return null;
      }

      // –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é
      if (!executedAt) {
        executedAt = new Date().toISOString();
      }

      return {
        order_id: orderId,
        symbol,
        side,
        quantity: parseFloat(quantity) || 0,
        price: parseFloat(price) || 0,
        fees_usdt: parseFloat(fees) || 0,
        status: status || 'filled',
        executed_at: executedAt,
        platform: 'bybit',
        accountName: this.settings.accountName,
        employee_id: this.settings.employeeId
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–∞:', error);
      return null;
    }
  }

  extractOrderDataFromElement(element) {
    try {
      const text = element.textContent || element.innerText || '';
      
      // –ò—â–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É–∑–ª—ã –∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏
      const allElements = [element, ...element.querySelectorAll('*')];
      const textParts = [];
      
      allElements.forEach(el => {
        if (el.textContent && el.textContent.trim()) {
          textParts.push(el.textContent.trim());
        }
      });

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —á–∞—Å—Ç–∏
      const fullText = textParts.join(' ');
      
      console.log('–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç:', fullText.substring(0, 200));
      
      let orderId = '';
      let symbol = '';
      let side = '';
      let quantity = '';
      let price = '';
      let status = '';
      let executedAt = '';
      let fees = '0';

      // –ò—â–µ–º Order ID (–¥–ª–∏–Ω–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–¥—ã, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è Bybit)
      const orderIdMatches = fullText.match(/\d{15,}/g); // –ò—â–µ–º —á–∏—Å–ª–∞ –¥–ª–∏–Ω–æ–π 15+ —Å–∏–º–≤–æ–ª–æ–≤
      if (orderIdMatches && orderIdMatches.length > 0) {
        // –ë–µ—Ä–µ–º —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π ID (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ Order ID)
        orderId = orderIdMatches.reduce((a, b) => a.length > b.length ? a : b);
      } else {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¥–ª–∏–Ω–Ω—ã–π ID, –∏—â–µ–º –ª—é–±–æ–π –±—É–∫–≤–µ–Ω–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–¥
        const alphaNumMatch = fullText.match(/[A-Z0-9]{8,}/);
        if (alphaNumMatch) {
          orderId = alphaNumMatch[0];
        }
      }

      // –ò—â–µ–º —Å–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã (—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Bybit RUB/USDT)
      if (fullText.includes('RUB') && fullText.includes('USDT')) {
        symbol = 'USDT/RUB'; // –ü—Ä–æ–¥–∞–∂–∞ USDT –∑–∞ RUB
      } else {
        // –ò—â–µ–º –æ–±—ã—á–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
        const symbolMatch = fullText.match(/([A-Z]{3,})[\s\/\-]?([A-Z]{3,})/);
        if (symbolMatch) {
          symbol = symbolMatch[1] + '/' + symbolMatch[2];
        } else {
          // –ò—â–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Å—Ç–æ USDT)
          const singleSymbolMatch = fullText.match(/\b([A-Z]{3,})\b/);
          if (singleSymbolMatch) {
            symbol = singleSymbolMatch[1] + '/USDT'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ–±–∞–≤–ª—è–µ–º USDT
          }
        }
      }

      // –ò—â–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (–≤–∫–ª—é—á–∞—è —Ä—É—Å—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã)
      if (fullText.toLowerCase().includes('buy') || fullText.toLowerCase().includes('–ø–æ–∫—É–ø–∫–∞') || 
          fullText.toLowerCase().includes('long') || fullText.toLowerCase().includes('–ø–æ–∫—É–ø–∞—Ç—å')) {
        side = 'buy';
      } else if (fullText.toLowerCase().includes('sell') || fullText.toLowerCase().includes('–ø—Ä–æ–¥–∞–∂–∞') || 
                 fullText.toLowerCase().includes('short') || fullText.toLowerCase().includes('–ø—Ä–æ–¥–∞—Ç—å')) {
        side = 'sell';
      }

      // –ò—â–µ–º —Å—Ç–∞—Ç—É—Å (–≤–∫–ª—é—á–∞—è —Ä—É—Å—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã)
      if (fullText.toLowerCase().includes('filled') || fullText.toLowerCase().includes('completed') || 
          fullText.toLowerCase().includes('–≤—ã–ø–æ–ª–Ω–µ–Ω') || fullText.toLowerCase().includes('done') ||
          fullText.toLowerCase().includes('–∏—Å–ø–æ–ª–Ω–µ–Ω') || fullText.toLowerCase().includes('–∑–∞–≤–µ—Ä—à–µ–Ω') ||
          fullText.toLowerCase().includes('–∑–∞–≤–µ—Ä—à–µ–Ω–æ')) {
        status = '–∑–∞–≤–µ—Ä—à–µ–Ω–æ';
      } else if (fullText.toLowerCase().includes('canceled') || fullText.toLowerCase().includes('cancelled') ||
                 fullText.toLowerCase().includes('–æ—Ç–º–µ–Ω–µ–Ω') || fullText.toLowerCase().includes('–æ—Ç–º–µ–Ω—ë–Ω')) {
        status = 'canceled';
      } else if (fullText.toLowerCase().includes('pending') || fullText.toLowerCase().includes('–æ–∂–∏–¥–∞–Ω–∏–µ') ||
                 fullText.toLowerCase().includes('–∞–∫—Ç–∏–≤–µ–Ω') || fullText.toLowerCase().includes('–æ—Ç–∫—Ä—ã—Ç')) {
        status = 'pending';
      } else if (fullText.toLowerCase().includes('appealed') || fullText.toLowerCase().includes('–∞–ø–µ–ª–ª—è—Ü–∏—è')) {
        status = 'appealed';
      } else {
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å—á–∏—Ç–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º (–µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ)
        status = '–∑–∞–≤–µ—Ä—à–µ–Ω–æ';
      }

      // –ò—â–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Bybit)
      console.log('–ò—â–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ:', fullText);
      
      // –ò—â–µ–º —Ü–µ–Ω—É –≤ RUB (–æ–±—ã—á–Ω–æ —á–∏—Å–ª–æ —Å –∑–∞–ø—è—Ç–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä "83,75 RUB")
      const rubPriceMatch = fullText.match(/(\d+[,.]?\d*)\s*RUB/i);
      if (rubPriceMatch) {
        price = parseFloat(rubPriceMatch[1].replace(',', '.'));
        console.log('–ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –≤ RUB:', price);
      }
      
      // –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USDT (–æ–±—ã—á–Ω–æ —á–∏—Å–ª–æ —Å –∑–∞–ø—è—Ç–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä "137,0000 USDT")
      const usdtQuantityMatch = fullText.match(/(\d+[,.]?\d*)\s*USDT/i);
      if (usdtQuantityMatch) {
        quantity = parseFloat(usdtQuantityMatch[1].replace(',', '.'));
        console.log('–ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USDT:', quantity);
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∏—â–µ–º –≤—Å–µ —á–∏—Å–ª–∞
      if (!price || !quantity) {
        const allNumbers = fullText.match(/\d+[,.]?\d*/g);
        if (allNumbers) {
          const cleanNumbers = allNumbers
            .map(n => parseFloat(n.replace(',', '.')))
            .filter(n => !isNaN(n) && n > 0);
          
          console.log('–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞:', cleanNumbers);
          
          // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ü–µ–Ω—É, –∏—â–µ–º —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Ü–µ–Ω RUB/USDT (50-200)
          if (!price) {
            const possiblePrice = cleanNumbers.find(n => n >= 50 && n <= 200);
            if (possiblePrice) {
              price = possiblePrice;
              console.log('–ù–∞–π–¥–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞—è —Ü–µ–Ω–∞:', price);
            }
          }
          
          // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∏—â–µ–º —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 1 (–Ω–æ –Ω–µ —Ü–µ–Ω—É)
          if (!quantity) {
            const possibleQuantity = cleanNumbers.find(n => n > 1 && n !== price);
            if (possibleQuantity) {
              quantity = possibleQuantity;
              console.log('–ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', quantity);
            }
          }
          
          // –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞—à–ª–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–∞ —á–∏—Å–ª–∞
          if (!quantity && cleanNumbers.length > 0) {
            quantity = cleanNumbers[0];
          }
          if (!price && cleanNumbers.length > 1) {
            price = cleanNumbers[1];
          }
        }
      }

      // –ò—â–µ–º –¥–∞—Ç—É (—Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
      const dateMatch = fullText.match(/\d{2}\/\d{2}\/\d{4}|\d{4}-\d{2}-\d{2}|\d{2}\.\d{2}\.\d{4}|\d{2}-\d{2}-\d{2}/);
      if (dateMatch) {
        executedAt = dateMatch[0];
      } else {
        executedAt = new Date().toISOString();
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ Order ID, —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
      if (!orderId && symbol && side) {
        orderId = `${symbol.replace('/', '')}_${side}_${Date.now()}`;
      }

      console.log('–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
        orderId, symbol, side, quantity, price, status, executedAt
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (!orderId || !symbol || !side) {
        console.log('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞');
        return null;
      }

      console.log('‚úÖ –û—Ä–¥–µ—Ä –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ä–¥–µ—Ä–∞');

      const totalUsdt = quantity && price ? quantity * price : 0;

      return {
        order_id: orderId,
        employee_id: this.settings.employeeId,
        platform: 'bybit',
        accountName: this.settings.accountName,
        symbol: symbol,
        side: side,
        quantity: quantity || 0,
        price: price || 0,
        total_usdt: totalUsdt,
        fees_usdt: parseFloat(fees) || 0,
        status: status || 'filled',
        executed_at: executedAt
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞:', error);
      return null;
    }
  }

  isOrderCompleted(status) {
    const completedStatuses = ['filled', 'completed', 'executed', 'done', '–∑–∞–≤–µ—Ä—à–µ–Ω–æ', '–∏—Å–ø–æ–ª–Ω–µ–Ω', '–≤—ã–ø–æ–ª–Ω–µ–Ω'];
    const result = completedStatuses.some(s => status.toLowerCase().includes(s));
    console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ "${status}": ${result ? '–ü–†–û–®–ï–õ' : '–ù–ï –ü–†–û–®–ï–õ'}`);
    return result;
  }

  checkOrderNotifications() {
    // –ò—â–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤
    const notifications = document.querySelectorAll('.notification, .toast, .alert, [role="alert"]');
    
    notifications.forEach(notification => {
      const text = notification.textContent.toLowerCase();
      if (text.includes('order') && (text.includes('filled') || text.includes('completed'))) {
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞
        this.handleOrderNotification(notification);
      }
    });
  }

  handleOrderNotification(notification) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const text = notification.textContent;
    
    // –ò—â–µ–º Order ID –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
    const orderIdMatch = text.match(/order[:\s]+([A-Z0-9]{8,})/i);
    if (orderIdMatch) {
      const orderId = orderIdMatch[1];
      
      // –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
      if (!this.processedOrders.has(orderId)) {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ
        this.fetchOrderDetails(orderId);
      }
    }
  }

  async fetchOrderDetails(orderId) {
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ—Ä–¥–µ—Ä –≤ —Ç–∞–±–ª–∏—Ü–µ
      const orderRow = document.querySelector(`[data-order-id="${orderId}"], tr:has-text("${orderId}")`);
      if (orderRow) {
        const cells = orderRow.querySelectorAll('td');
        const orderData = this.extractOrderData(cells);
        if (orderData) {
          this.sendOrderToServer(orderData);
          this.processedOrders.add(orderId);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ—Ä–¥–µ—Ä–∞:', error);
    }
  }

  async sendOrderToServer(orderData) {
    try {
      console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', orderData);
      console.log('üîó URL —Å–µ—Ä–≤–µ—Ä–∞:', `${this.settings.serverUrl}/api/orders`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–¥–∞–Ω
      if (!this.settings.serverUrl) {
        throw new Error('URL —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –∑–∞–¥–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');
      
      const response = await fetch(`${this.settings.serverUrl}/api/orders`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(orderData)
      });

      console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ - —Å—Ç–∞—Ç—É—Å:', response.status);
      
      if (response.ok) {
        const responseData = await response.json();
        console.log('‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', responseData);
        this.showSuccessNotification('–û—Ä–¥–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ');
        return true;
      } else {
        const errorText = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞:', response.status, errorText);
        this.showErrorNotification(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: ${response.status}`);
        return false;
      }
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–¥–µ—Ä–∞:', error);
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏
      let errorMessage = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º';
      
      if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
        errorMessage = '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n1. –ó–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–∞ ' + this.settings.serverUrl + '\n2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è\n3. –ù–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ª–∏ –±—Ä–∞—É–∑–µ—Ä –∑–∞–ø—Ä–æ—Å—ã';
        console.error('üî• –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
        console.error('   1. –ó–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–∞:', this.settings.serverUrl);
        console.error('   2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è');
        console.error('   3. –ù–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ª–∏ –±—Ä–∞—É–∑–µ—Ä –∑–∞–ø—Ä–æ—Å—ã');
      } else if (error.name === 'TypeError' && error.message.includes('NetworkError')) {
        errorMessage = '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ';
      } else if (error.message.includes('URL —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –∑–∞–¥–∞–Ω')) {
        errorMessage = '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ URL —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏';
      }
      
      this.showErrorNotification(errorMessage);
      return false;
    }
  }

  showSuccessNotification(message) {
    this.showNotification(message, 'success');
  }

  showErrorNotification(message) {
    this.showNotification(message, 'error');
  }

  showNotification(message, type) {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 10px 15px;
      border-radius: 4px;
      color: white;
      font-weight: bold;
      z-index: 10000;
      background: ${type === 'success' ? '#28a745' : '#dc3545'};
    `;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 3000);
  }

  async loadExistingOrders(settings) {
    try {
      console.log('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤...');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
      this.showNotification('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞...', 'info');
      
      let allOrders = [];
      let processedElements = new Set();
      
      // 1. –ò—â–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å –æ—Ä–¥–µ—Ä–∞–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const tableSelectors = [
        '[data-testid="order-table"]',
        '.order-table',
        '.orders-table',
        '.trades-table',
        '.history-table',
        'table[class*="order"]',
        'table[class*="trade"]',
        'table[class*="history"]',
        'table'
      ];
      
      for (const selector of tableSelectors) {
        const tables = document.querySelectorAll(selector);
        tables.forEach(table => {
          // –ò–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
          if (processedElements.has(table)) return;
          processedElements.add(table);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å –æ—Ä–¥–µ—Ä–∞–º–∏ (–∏—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞)
          const tableText = table.textContent.toLowerCase();
          if (!tableText.includes('order') && !tableText.includes('trade') && 
              !tableText.includes('–æ—Ä–¥–µ—Ä') && !tableText.includes('—Å–¥–µ–ª–∫–∞')) {
            return;
          }
          
          const rows = table.querySelectorAll('tr');
          console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å ${rows.length} —Å—Ç—Ä–æ–∫–∞–º–∏`);
          
          rows.forEach((row, rowIndex) => {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if (rowIndex === 0) return;
            
            const cells = row.querySelectorAll('td');
            if (cells.length < 3) return; // –ú–∏–Ω–∏–º—É–º 3 —è—á–µ–π–∫–∏ –¥–ª—è –æ—Ä–¥–µ—Ä–∞
            
            const orderData = this.extractOrderData(cells);
            if (orderData && this.isOrderCompleted(orderData.status)) {
              // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              orderData.employee_id = settings.employeeId;
              orderData.accountName = settings.accountName;
              orderData.platform = 'bybit';
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ä–¥–µ—Ä –µ—â–µ –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
              if (!this.processedOrders.has(orderData.order_id)) {
                allOrders.push(orderData);
              }
            }
          });
        });
      }

      // 2. –ò—â–µ–º div-—ç–ª–µ–º–µ–Ω—Ç—ã —Å –æ—Ä–¥–µ—Ä–∞–º–∏ (–¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π)
      const divSelectors = [
        '.ant-table-row',           // Ant Design —Ç–∞–±–ª–∏—Ü—ã
        '[data-row-key]',           // –°—Ç—Ä–æ–∫–∏ —Å data-row-key
        '.order-row',               // –°—Ç—Ä–æ–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤
        '.trade-row',               // –°—Ç—Ä–æ–∫–∏ —Å–¥–µ–ª–æ–∫
        '.history-row',             // –°—Ç—Ä–æ–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        '[class*="order"]',         // –õ—é–±—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å "order" –≤ –∫–ª–∞—Å—Å–µ
        '[class*="trade"]',         // –õ—é–±—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å "trade" –≤ –∫–ª–∞—Å—Å–µ
        '.table-row',               // –û–±—â–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        '[data-testid*="order"]',   // –≠–ª–µ–º–µ–Ω—Ç—ã —Å "order" –≤ data-testid
        '[data-testid*="trade"]',   // –≠–ª–µ–º–µ–Ω—Ç—ã —Å "trade" –≤ data-testid
        '.list-item',               // –≠–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
        '[class*="row"]',           // –õ—é–±—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å "row" –≤ –∫–ª–∞—Å—Å–µ
        '.ant-table-tbody tr',      // –°—Ç—Ä–æ–∫–∏ –≤ tbody Ant Design
        '.rc-table-row',            // React Component —Ç–∞–±–ª–∏—Ü—ã
        '[class*="list-item"]',     // –≠–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
        '[class*="card"]',          // –ö–∞—Ä—Ç–æ—á–∫–∏
        '.bybit-table-row',         // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–ª–∞—Å—Å—ã Bybit
        '[class*="history"]',       // –≠–ª–µ–º–µ–Ω—Ç—ã –∏—Å—Ç–æ—Ä–∏–∏
        '[class*="transaction"]',   // –≠–ª–µ–º–µ–Ω—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        '.table-body-row',          // –°—Ç—Ä–æ–∫–∏ —Ç–µ–ª–∞ —Ç–∞–±–ª–∏—Ü—ã
        '[role="row"]'              // –≠–ª–µ–º–µ–Ω—Ç—ã —Å —Ä–æ–ª—å—é "row"
      ];

      for (const selector of divSelectors) {
        const elements = document.querySelectorAll(selector);
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞: ${selector}`);
        
        elements.forEach(element => {
          // –ò–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
          if (processedElements.has(element)) return;
          processedElements.add(element);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ä–¥–µ—Ä–∞—Ö (—É–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
          const elementText = element.textContent.toLowerCase();
          const textLength = elementText.length;
          
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–∫–Ω–æ–ø–∫–∏, –∑–∞–≥–æ–ª–æ–≤–∫–∏, —Ñ–∏–ª—å—Ç—Ä—ã)
          if (textLength < 20 || textLength > 1000) {
            return; // –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
          }
          
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
          if (elementText.includes('–≤—Å–µ –≤—Å–µ') || elementText.includes('—ç–∫—Å–ø–æ—Ä—Ç —ç–∫—Å–ø–æ—Ä—Ç') ||
              elementText.includes('–º–æ–Ω–µ—Ç–∞ –º–æ–Ω–µ—Ç–∞') || elementText.includes('—Ç–∏–ø —Ç–∏–ø') ||
              elementText.includes('—Å—Ç–∞—Ç—É—Å —Å—Ç–∞—Ç—É—Å') || elementText.includes('–∫—É–ø–∏—Ç—å / –ø—Ä–æ–¥–∞—Ç—å –∫—É–ø–∏—Ç—å / –ø—Ä–æ–¥–∞—Ç—å')) {
            return;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –æ—Ä–¥–µ—Ä–æ–≤
          const hasOrderKeywords = elementText.includes('order') || elementText.includes('trade') || 
              elementText.includes('–æ—Ä–¥–µ—Ä') || elementText.includes('—Å–¥–µ–ª–∫–∞') ||
              elementText.includes('–ø–æ–∫—É–ø–∫–∞') || elementText.includes('–ø—Ä–æ–¥–∞–∂–∞');
              
          const hasCurrency = elementText.includes('usdt') || elementText.includes('btc') ||
              elementText.includes('eth') || elementText.includes('rub');
              
          const hasNumbers = /\d+[.,]\d+/.test(elementText); // –ß–∏—Å–ª–∞ —Å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏
          
          const hasStatus = elementText.includes('–∏—Å–ø–æ–ª–Ω–µ–Ω') || elementText.includes('–∑–∞–≤–µ—Ä—à–µ–Ω') ||
              elementText.includes('filled') || elementText.includes('completed');
          
          // –≠–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–∞–ª—é—Ç—É –ò (–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ò–õ–ò —á–∏—Å–ª–∞ –ò–õ–ò —Å—Ç–∞—Ç—É—Å)
          if (!hasCurrency || !(hasOrderKeywords || hasNumbers || hasStatus)) {
            return;
          }
          
          const orderData = this.extractOrderDataFromElement(element);
          if (orderData) {
            console.log('üì¶ –ò–∑–≤–ª–µ—á–µ–Ω –æ—Ä–¥–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:', orderData);
            
            if (this.isOrderCompleted(orderData.status)) {
              console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
              
              // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              orderData.employeeId = settings.employeeId;
              orderData.accountName = settings.accountName;
              orderData.platform = 'bybit';
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ä–¥–µ—Ä –µ—â–µ –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
              if (!this.processedOrders.has(orderData.orderId)) {
                allOrders.push(orderData);
                console.log('üìù –û—Ä–¥–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏. –í—Å–µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ:', allOrders.length);
              } else {
                console.log('‚ö†Ô∏è –û—Ä–¥–µ—Ä —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ:', orderData.orderId);
              }
            } else {
              console.log('‚ùå –°—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:', orderData.status);
            }
          }
        });
      }
      
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${allOrders.length} –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏`);
      
      if (allOrders.length === 0) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –Ω–∞—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        console.log('–û—Ç–ª–∞–¥–∫–∞: –∏—â–µ–º –ª—é–±—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞...');
        const allElements = document.querySelectorAll('*');
        let foundElements = 0;
        
        allElements.forEach(el => {
          const text = el.textContent.toLowerCase();
          if ((text.includes('order') || text.includes('trade') || text.includes('buy') || text.includes('sell') ||
               text.includes('–ø—Ä–æ–¥–∞–∂–∞') || text.includes('–ø–æ–∫—É–ø–∫–∞') || text.includes('usdt') || text.includes('rub')) && 
              text.length > 10 && text.length < 500) {
            console.log('–ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ä–¥–µ—Ä–∞:', el.tagName, el.className, text.substring(0, 100));
            foundElements++;
          }
        });
        
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${foundElements} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ä–¥–µ—Ä–æ–≤`);
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è Bybit - –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å RUB –∏–ª–∏ USDT
        console.log('–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è Bybit:');
        const bybitElements = document.querySelectorAll('*');
        bybitElements.forEach(el => {
          const text = el.textContent;
          if (text.includes('RUB') || text.includes('USDT')) {
            console.log('–≠–ª–µ–º–µ–Ω—Ç —Å –≤–∞–ª—é—Ç–æ–π:', el.tagName, el.className, text.substring(0, 150));
          }
        });
        
        this.showNotification(`–û—Ä–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ. –ù–∞–π–¥–µ–Ω–æ ${foundElements} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.`, 'error');
        return { success: false, error: `–û—Ä–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ. –ù–∞–π–¥–µ–Ω–æ ${foundElements} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.` };
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      let successCount = 0;
      let errorCount = 0;
      
      for (const orderData of allOrders) {
        try {
          const response = await fetch(`${settings.serverUrl}/api/orders`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(orderData)
          });

          if (response.ok) {
            successCount++;
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            this.processedOrders.add(orderData.order_id);
          } else {
            errorCount++;
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞:', orderData.order_id, response.status);
          }
        } catch (error) {
          errorCount++;
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–¥–µ—Ä–∞:', orderData.order_id, error);
        }
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (successCount > 0) {
        this.showSuccessNotification(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${successCount} –æ—Ä–¥–µ—Ä–æ–≤!`);
        if (errorCount > 0) {
          this.showErrorNotification(`${errorCount} –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å`);
        }
      } else {
        this.showErrorNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞');
      }
      
      return { 
        success: successCount > 0, 
        count: successCount,
        total: allOrders.length,
        errors: errorCount
      };
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤:', error);
      this.showErrorNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤: ' + error.message);
      return { success: false, error: error.message };
    }
  }

  updateTracking() {
    if (this.observer) {
      this.observer.disconnect();
    }
    
    if (this.settings.trackingEnabled && this.settings.employeeId) {
      this.startTracking();
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–∫–µ—Ä
new BybitOrderTracker(); 