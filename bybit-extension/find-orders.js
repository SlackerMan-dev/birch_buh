// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Bybit
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –æ—Ä–¥–µ—Ä–∞–º–∏

function findBybitOrders() {
  console.log('üîç –ü–û–ò–°–ö –û–†–î–ï–†–û–í –ù–ê –°–¢–†–ê–ù–ò–¶–ï BYBIT');
  console.log('=====================================');
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–æ—Ö–æ–∂ –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –æ—Ä–¥–µ—Ä
  function isLikelyOrder(text) {
    const lowerText = text.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
    if (text.length < 30 || text.length > 500) {
      return false;
    }
    
    // –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª—é—Ç–∞
    const hasCurrency = lowerText.includes('usdt') || lowerText.includes('rub') || 
                       lowerText.includes('btc') || lowerText.includes('eth');
    
    // –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞ —Å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏
    const hasDecimalNumbers = /\d+[.,]\d+/.test(text);
    
    // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
    const hasDirection = lowerText.includes('–ø—Ä–æ–¥–∞–∂–∞') || lowerText.includes('–ø–æ–∫—É–ø–∫–∞') ||
                        lowerText.includes('buy') || lowerText.includes('sell');
    
    // –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const isNotInterface = !lowerText.includes('–≤—Å–µ –≤—Å–µ') && 
                           !lowerText.includes('—ç–∫—Å–ø–æ—Ä—Ç —ç–∫—Å–ø–æ—Ä—Ç') &&
                           !lowerText.includes('–º–æ–Ω–µ—Ç–∞ –º–æ–Ω–µ—Ç–∞') &&
                           !lowerText.includes('—Ç–∏–ø —Ç–∏–ø') &&
                           !lowerText.includes('—Å—Ç–∞—Ç—É—Å —Å—Ç–∞—Ç—É—Å');
    
    return hasCurrency && hasDecimalNumbers && hasDirection && isNotInterface;
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–∞
  function extractOrderInfo(text) {
    const lowerText = text.toLowerCase();
    
    // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    let side = '';
    if (lowerText.includes('–ø—Ä–æ–¥–∞–∂–∞') || lowerText.includes('sell')) {
      side = 'sell';
    } else if (lowerText.includes('–ø–æ–∫—É–ø–∫–∞') || lowerText.includes('buy')) {
      side = 'buy';
    }
    
    // –í–∞–ª—é—Ç–∞
    const currencies = text.match(/([A-Z]{3,})/g) || [];
    const symbol = currencies.length > 0 ? currencies[0] : '';
    
    // –ß–∏—Å–ª–∞
    const numbers = text.match(/[\d,]+\.?\d*/g) || [];
    const cleanNumbers = numbers.map(n => parseFloat(n.replace(/,/g, ''))).filter(n => !isNaN(n));
    
    return {
      side,
      symbol,
      numbers: cleanNumbers,
      text: text.substring(0, 100) + '...'
    };
  }
  
  // –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
  const prioritySelectors = [
    'tbody tr',
    '.ant-table-tbody > tr',
    'tr:not(:first-child)'
  ];
  
  let foundOrders = [];
  
  console.log('\nüìä –ü–û–ò–°–ö –í –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–• –°–ï–õ–ï–ö–¢–û–†–ê–•:');
  prioritySelectors.forEach(selector => {
    const elements = document.querySelectorAll(selector);
    console.log(`\n${selector}: –Ω–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    
    elements.forEach((element, index) => {
      const text = element.textContent;
      if (isLikelyOrder(text)) {
        const orderInfo = extractOrderInfo(text);
        foundOrders.push({
          selector,
          index,
          element,
          ...orderInfo
        });
        console.log(`  ‚úÖ –û—Ä–¥–µ—Ä ${foundOrders.length}:`, orderInfo);
      }
    });
  });
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö, –∏—â–µ–º –≤ –¥—Ä—É–≥–∏—Ö
  if (foundOrders.length === 0) {
    console.log('\nüìã –ü–û–ò–°–ö –í –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –°–ï–õ–ï–ö–¢–û–†–ê–•:');
    const otherSelectors = [
      '.ant-table-row',
      '[data-row-key]',
      '.order-row',
      '.trade-row',
      '.history-row',
      '[class*="order"]:not([class*="button"]):not([class*="header"])',
      '[role="row"]'
    ];
    
    otherSelectors.forEach(selector => {
      const elements = document.querySelectorAll(selector);
      if (elements.length > 0) {
        console.log(`\n${selector}: –Ω–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
        
        elements.forEach((element, index) => {
          const text = element.textContent;
          if (isLikelyOrder(text)) {
            const orderInfo = extractOrderInfo(text);
            foundOrders.push({
              selector,
              index,
              element,
              ...orderInfo
            });
            console.log(`  ‚úÖ –û—Ä–¥–µ—Ä ${foundOrders.length}:`, orderInfo);
          }
        });
      }
    });
  }
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:');
  console.log(`–ù–∞–π–¥–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: ${foundOrders.length}`);
  
  if (foundOrders.length > 0) {
    console.log('\nüìã –°–ü–ò–°–û–ö –ù–ê–ô–î–ï–ù–ù–´–• –û–†–î–ï–†–û–í:');
    foundOrders.forEach((order, index) => {
      console.log(`\n${index + 1}. ${order.selector}[${order.index}]`);
      console.log(`   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${order.side}`);
      console.log(`   –í–∞–ª—é—Ç–∞: ${order.symbol}`);
      console.log(`   –ß–∏—Å–ª–∞: ${order.numbers.join(', ')}`);
      console.log(`   –¢–µ–∫—Å—Ç: ${order.text}`);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    console.log('\nüîç –ü–ï–†–í–´–ô –ù–ê–ô–î–ï–ù–ù–´–ô –≠–õ–ï–ú–ï–ù–¢:');
    console.log(foundOrders[0].element);
    
    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log(`–õ—É—á—à–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä: ${foundOrders[0].selector}`);
    console.log('–î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞ orderSelectors –≤ content.js');
    
  } else {
    console.log('\n‚ùå –û–†–î–ï–†–ê –ù–ï –ù–ê–ô–î–ï–ù–´');
    console.log('\nüîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:');
    
    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –≤–∞–ª—é—Ç–∞–º–∏
    const currencyElements = [];
    document.querySelectorAll('*').forEach(el => {
      const text = el.textContent;
      if ((text.includes('USDT') || text.includes('RUB')) && text.length > 10 && text.length < 300) {
        currencyElements.push({
          text: text.substring(0, 100),
          tag: el.tagName,
          className: el.className
        });
      }
    });
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${currencyElements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –≤–∞–ª—é—Ç–∞–º–∏:`);
    currencyElements.slice(0, 10).forEach((item, index) => {
      console.log(`${index + 1}. ${item.tag}.${item.className}: ${item.text}`);
    });
    
    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–¥–µ–ª–∫–∏
    const directionElements = [];
    document.querySelectorAll('*').forEach(el => {
      const text = el.textContent.toLowerCase();
      if ((text.includes('–ø—Ä–æ–¥–∞–∂–∞') || text.includes('–ø–æ–∫—É–ø–∫–∞')) && text.length > 10 && text.length < 300) {
        directionElements.push({
          text: el.textContent.substring(0, 100),
          tag: el.tagName,
          className: el.className
        });
      }
    });
    
    console.log(`\n–ù–∞–π–¥–µ–Ω–æ ${directionElements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–¥–µ–ª–∫–∏:`);
    directionElements.slice(0, 10).forEach((item, index) => {
      console.log(`${index + 1}. ${item.tag}.${item.className}: ${item.text}`);
    });
  }
  
  console.log('\n=====================================');
  console.log('üîç –ü–û–ò–°–ö –ó–ê–í–ï–†–®–ï–ù');
  
  return foundOrders;
}

// –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞
const orders = findBybitOrders(); 