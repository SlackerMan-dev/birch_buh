#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import os
import shutil
import sqlite3
import sys
from datetime import datetime

def backup_file(filepath):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞"""
    if os.path.exists(filepath):
        backup_path = f"{filepath}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        shutil.copy2(filepath, backup_path)
        print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        return True
    return False

def apply_template_optimization():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω"""
    print("\nüîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞...")
    
    original_template = "templates/index.html"
    optimized_template = "templates/index_optimized.html"
    
    if not os.path.exists(optimized_template):
        print(f"‚ùå –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {optimized_template}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    if os.path.exists(original_template):
        backup_file(original_template)
    
    # –ó–∞–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω
    shutil.copy2(optimized_template, original_template)
    print(f"‚úÖ –®–∞–±–ª–æ–Ω –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é")
    return True

def apply_database_optimization():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    db_path = 'arbitrage_reports.db'
    
    if not os.path.exists(db_path):
        print(f"‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ë–î")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        
        if not tables:
            print("‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            conn.close()
            return False
        
        print(f"‚úì –ù–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã: {', '.join(tables)}")
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        indexes = [
            ("idx_shift_reports_employee_date", "shift_reports", "employee_id, shift_date"),
            ("idx_shift_reports_date_type", "shift_reports", "shift_date, shift_type"),
            ("idx_shift_reports_date_desc", "shift_reports", "shift_date DESC"),
            ("idx_shift_reports_employee_id", "shift_reports", "employee_id"),
            ("idx_shift_reports_complex", "shift_reports", "shift_date, shift_type, employee_id"),
            ("idx_employees_name", "employees", "name"),
            ("idx_employees_telegram", "employees", "telegram"),
            ("idx_accounts_platform", "accounts", "platform"),
            ("idx_accounts_employee_id", "accounts", "employee_id"),
            ("idx_accounts_platform_employee", "accounts", "platform, employee_id"),
            ("idx_initial_balances_platform", "initial_balances", "platform"),
            ("idx_initial_balances_account_name", "initial_balances", "account_name"),
        ]
        
        created_count = 0
        
        for index_name, table_name, columns in indexes:
            if table_name in tables:
                try:
                    sql = f"CREATE INDEX IF NOT EXISTS {index_name} ON {table_name}({columns})"
                    cursor.execute(sql)
                    print(f"‚úì –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å {index_name}")
                    created_count += 1
                except sqlite3.Error as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ {index_name}: {e}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã
        for table in tables:
            try:
                cursor.execute(f"ANALYZE {table}")
                print(f"‚úì –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ {table}")
            except sqlite3.Error as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü—ã {table}: {e}")
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {created_count}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False

def create_env_file():
    """–°–æ–∑–¥–∞–µ—Ç .env —Ñ–∞–π–ª –∏–∑ –ø—Ä–∏–º–µ—Ä–∞"""
    print("\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    env_example = "env.example"
    env_file = ".env"
    
    if not os.path.exists(env_example):
        print(f"‚ùå –§–∞–π–ª –ø—Ä–∏–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_example}")
        return False
    
    if os.path.exists(env_file):
        print(f"‚ö†Ô∏è  –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True
    
    shutil.copy2(env_example, env_file)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env")
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏!")
    return True

def update_app_imports():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤ app.py –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç"""
    print("\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ app.py...")
    
    app_file = "app.py"
    
    if not os.path.exists(app_file):
        print(f"‚ùå –§–∞–π–ª app.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_file(app_file)
    
    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    with open(app_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    if "from utils import" in content:
        content = content.replace("from utils import", "from utils_optimized import")
        print("‚úì –û–±–Ω–æ–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç utils –Ω–∞ utils_optimized")
    elif "import utils" in content:
        content = content.replace("import utils", "import utils_optimized as utils")
        print("‚úì –û–±–Ω–æ–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç utils –Ω–∞ utils_optimized")
    else:
        print("‚ö†Ô∏è  –ò–º–ø–æ—Ä—Ç—ã utils –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ app.py")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    with open(app_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ –§–∞–π–ª app.py –æ–±–Ω–æ–≤–ª–µ–Ω")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""
    print("üöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π P2P –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 60)
    
    success_count = 0
    total_steps = 4
    
    # 1. –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    if create_env_file():
        success_count += 1
    
    # 2. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
    if apply_template_optimization():
        success_count += 1
    
    # 3. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if apply_database_optimization():
        success_count += 1
    
    # 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤
    if update_app_imports():
        success_count += 1
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_steps} —à–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    
    if success_count == total_steps:
        print("üéâ –í—Å–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏")
        print("2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python app.py")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã")
        print("4. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å OPTIMIZATION_REPORT.md –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–µ –±—ã–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –≤—ã—à–µ")
    
    return success_count == total_steps

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 