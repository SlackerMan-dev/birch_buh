#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É orders –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è Bybit
"""

import os
import sys
from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError

def apply_migration():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã orders"""
    
    # –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    database_url = os.environ.get('DATABASE_URL', 'sqlite:///arbitrage_reports.db')
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        engine = create_engine(database_url)
        
        with engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–±–ª–∏—Ü–∞ orders
            result = conn.execute(text("""
                SELECT name FROM sqlite_master 
                WHERE type='table' AND name='order'
            """))
            
            if result.fetchone():
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'order' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É orders
            conn.execute(text("""
                CREATE TABLE "order" (
                    id INTEGER NOT NULL,
                    order_id VARCHAR(100) NOT NULL,
                    employee_id INTEGER NOT NULL,
                    platform VARCHAR(20) NOT NULL,
                    account_name VARCHAR(100) NOT NULL,
                    symbol VARCHAR(20) NOT NULL,
                    side VARCHAR(10) NOT NULL,
                    quantity NUMERIC(15, 8) NOT NULL,
                    price NUMERIC(15, 8) NOT NULL,
                    total_usdt NUMERIC(15, 2) NOT NULL,
                    fees_usdt NUMERIC(15, 2),
                    status VARCHAR(20) NOT NULL,
                    executed_at DATETIME NOT NULL,
                    created_at DATETIME,
                    updated_at DATETIME,
                    PRIMARY KEY (id),
                    FOREIGN KEY(employee_id) REFERENCES employee (id),
                    UNIQUE (order_id)
                )
            """))
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            conn.execute(text("""
                CREATE INDEX ix_order_employee_id ON "order" (employee_id)
            """))
            
            conn.execute(text("""
                CREATE INDEX ix_order_platform ON "order" (platform)
            """))
            
            conn.execute(text("""
                CREATE INDEX ix_order_status ON "order" (status)
            """))
            
            conn.execute(text("""
                CREATE INDEX ix_order_executed_at ON "order" (executed_at)
            """))
            
            conn.commit()
            
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!")
            print("üìä –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ 'order' —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏")
            
    except SQLAlchemyError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    print("üöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã orders...")
    apply_migration()
    print("‚ú® –ì–æ—Ç–æ–≤–æ!") 