#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å –æ—Ä–¥–µ—Ä–∞–º–∏
"""
import pandas as pd
import os
from datetime import datetime
import requests

def create_test_bybit_file():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª Bybit –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    test_data = [
        {
            'Order No.': '191288682052605952',
            'Symbol': 'BTCUSDT', 
            'Type': 'SELL',
            'Quantity': 1479.75,
            'Price': 83.75,
            'Currency': 'RUB',
            'Time': '2025-04-17 15:12:51'
        },
        {
            'Order No.': '191288682052605953',
            'Symbol': 'ETHUSDT',
            'Type': 'BUY', 
            'Quantity': 0.5,
            'Price': 3200.00,
            'Currency': 'USDT',
            'Time': '2025-04-17 15:15:30'
        },
        {
            'Order No.': '191288682052605954',
            'Symbol': 'ADAUSDT',
            'Type': 'SELL',
            'Quantity': 1000,
            'Price': 0.45,
            'Currency': 'USDT', 
            'Time': '2025-04-17 15:20:15'
        }
    ]
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    df = pd.DataFrame(test_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel —Ñ–∞–π–ª
    filename = f"test_bybit_orders_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    filepath = os.path.join('uploads', filename)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É uploads –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('uploads', exist_ok=True)
    
    df.to_excel(filepath, index=False)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {filepath}")
    print("üìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:")
    print(df.to_string(index=False))
    
    return filepath

def create_test_csv_file():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π CSV —Ñ–∞–π–ª"""
    
    test_data = [
        {
            'Order ID': 'CSV001',
            'Symbol': 'BTCUSDT',
            'Side': 'buy',
            'Quantity': 0.001,
            'Price': 50000.00,
            'Time': '2025-01-07 12:00:00'
        },
        {
            'Order ID': 'CSV002', 
            'Symbol': 'ETHUSDT',
            'Side': 'sell',
            'Quantity': 0.1,
            'Price': 3500.00,
            'Time': '2025-01-07 12:05:00'
        }
    ]
    
    df = pd.DataFrame(test_data)
    
    filename = f"test_orders_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    filepath = os.path.join('uploads', filename)
    
    df.to_csv(filepath, index=False)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π CSV —Ñ–∞–π–ª: {filepath}")
    print("üìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:")
    print(df.to_string(index=False))
    
    return filepath

def test_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–µ—Ä —Ñ–∞–π–ª–æ–≤"""
    try:
        from app import parse_orders_file
        
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä —Ñ–∞–π–ª–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        excel_file = create_test_bybit_file()
        csv_file = create_test_csv_file()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
        print(f"\nüìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª: {excel_file}")
        try:
            orders_excel = parse_orders_file(excel_file, 'bybit')
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(orders_excel)} –æ—Ä–¥–µ—Ä–æ–≤ –≤ Excel —Ñ–∞–π–ª–µ")
            for i, order in enumerate(orders_excel, 1):
                print(f"  {i}. {order['order_id']} - {order['symbol']} - {order['side']} - {order['quantity']} @ {order['price']}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º CSV —Ñ–∞–π–ª
        print(f"\nüìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º CSV —Ñ–∞–π–ª: {csv_file}")
        try:
            orders_csv = parse_orders_file(csv_file, 'bybit')
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(orders_csv)} –æ—Ä–¥–µ—Ä–æ–≤ –≤ CSV —Ñ–∞–π–ª–µ")
            for i, order in enumerate(orders_csv, 1):
                print(f"  {i}. {order['order_id']} - {order['symbol']} - {order['side']} - {order['quantity']} @ {order['price']}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        try:
            os.remove(excel_file)
            os.remove(csv_file)
            print("\nüóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
        except:
            pass
            
    except ImportError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ app.py")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ app.py –≤ PYTHONPATH")

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    
    required_packages = ['pandas', 'openpyxl', 'flask', 'flask_sqlalchemy', 'flask_cors']
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã:")
        print(f"pip install {' '.join(missing_packages)}")
        return False
    
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    return True

def test_upload_bliss():
    url = 'http://localhost:5000/api/orders/upload'
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    data = {
        'employee_id': '1',
        'platform': 'bliss',
        'account_name': 'test_account',
        'start_date': '2025-07-09T06:00',
        'end_date': '2025-07-09T15:00'
    }
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    files = {
        'file': ('test_bliss.csv', open('test_bliss.csv', 'rb'), 'text/csv')
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    response = requests.post(url, data=data, files=files)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"Status code: {response.status_code}")
    print(f"Response: {response.json()}")

def main():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        return
    
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
    test_parser()
    
    print("\nüí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python app.py")
    print("2. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5000")
    print("3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–ò—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤'")
    print("4. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–≥—Ä—É–∑–∫—É'")
    print("5. –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª")
    
    print("\nüìÑ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π:")
    print("python test_upload.py")

if __name__ == "__main__":
    main() 